{
    "url": "https://developers.google.com/calendar/api/v3/reference/events/import",
    "content": "Home\nGoogle Workspace\nGoogle Calendar\nReference\nSend feedback\nEvents: import\nStay organized with collections\nSave and categorize content based on your preferences.\nNote:\nRequires\nauthorization\n.\nImports an event. This operation is used to add a private copy of an existing event to a calendar. Only events with an\neventType\nof\ndefault\nmay be imported.\nDeprecated behavior:\nIf a non-\ndefault\nevent is imported, its type will be changed to\ndefault\nand any event-type-specific properties it may have will be dropped.\nTry it now\nor\nsee an example\n.\nRequest\nHTTP request\nPOST https://www.googleapis.com/calendar/v3/calendars/\ncalendarId\n/events/import\nParameters\nParameter name\nValue\nDescription\nPath parameters\ncalendarId\nstring\nCalendar identifier. To retrieve calendar IDs call the\ncalendarList.list\nmethod. If you want to access the primary calendar of the currently logged in user, use the \"\nprimary\n\" keyword.\nOptional query parameters\nconferenceDataVersion\ninteger\nVersion number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.\n          Acceptable values are\n0\nto\n1\n, inclusive.\nsupportsAttachments\nboolean\nWhether API client performing operation supports event attachments. Optional. The default is False.\nAuthorization\nThis request requires authorization with at least one of the following scopes:\nScope\nhttps://www.googleapis.com/auth/calendar\nhttps://www.googleapis.com/auth/calendar.events\nhttps://www.googleapis.com/auth/calendar.app.created\nhttps://www.googleapis.com/auth/calendar.events.owned\nFor more information, see the\nauthentication and authorization\npage.\nRequest body\nIn the request body, supply an\nEvents resource\nwith the following properties:\nProperty name\nValue\nDescription\nNotes\nRequired Properties\nend\nnested object\nThe (exclusive) end time of the event. For a recurring event, this is the end time of the first instance.\niCalUID\nstring\nEvent unique identifier as defined in\nRFC5545\n. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the\nimport\nmethod.\nNote that the\niCalUID\nand the\nid\nare not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different\nid\ns while they all share the same\niCalUID\ns. To retrieve an event using its\niCalUID\n, call the\nevents.list method using the\niCalUID\nparameter\n. To retrieve an event using its\nid\n, call the\nevents.get\nmethod.\nstart\nnested object\nThe (inclusive) start time of the event. For a recurring event, this is the start time of the first instance.\nOptional Properties\nanyoneCanAddSelf\nboolean\nWhether anyone can invite themselves to the event (deprecated). Optional. The default is False.\nwritable\nattachments[].\nfileUrl\nstring\nURL link to the attachment.\nFor adding Google Drive file attachments use the same format as in\nalternateLink\nproperty of the\nFiles\nresource in the Drive API.\nRequired when adding an attachment.\nwritable\nattendees[]\nlist\nThe attendees of the event. See the\nEvents with attendees\nguide for more information on scheduling events with other calendar users. Service accounts need to use\ndomain-wide delegation of authority\nto populate the attendee list.\nwritable\nattendees[].\nadditionalGuests\ninteger\nNumber of additional guests. Optional. The default is 0.\nwritable\nattendees[].\ncomment\nstring\nThe attendee's response comment. Optional.\nwritable\nattendees[].\ndisplayName\nstring\nThe attendee's name, if available. Optional.\nwritable\nattendees[].\nemail\nstring\nThe attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per\nRFC5322\n.\nRequired when adding an attendee.\nwritable\nattendees[].\noptional\nboolean\nWhether this is an optional attendee. Optional. The default is False.\nwritable\nattendees[].\nresource\nboolean\nWhether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.\nwritable\nattendees[].\nresponseStatus\nstring\nThe attendee's response status. Possible values are:\n\"\nneedsAction\n\" - The attendee has not responded to the invitation (recommended for new events).\n\"\ndeclined\n\" - The attendee has declined the invitation.\n\"\ntentative\n\" - The attendee has tentatively accepted the invitation.\n\"\naccepted\n\" - The attendee has accepted the invitation.\nWarning:\nIf you add an event using the values\ndeclined\n,\ntentative\n, or\naccepted\n, attendees with the \"Add invitations to my calendar\" setting set to \"When I respond to invitation in email\" or \"Only if the sender is known\" might have their response reset to\nneedsAction\nand won't see an event in their calendar unless they change their response in the event invitation email. Furthermore, if more than 200 guests are invited to the event, response status is not propagated to the guests.\nwritable\nattendeesOmitted\nboolean\nWhether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the\nmaxAttendee\nquery parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.\nwritable\ncolorId\nstring\nThe color of the event. This is an ID referring to an entry in the\nevent\nsection of the colors definition (see the\ncolors endpoint\n). Optional.\nwritable\nconferenceData\nnested object\nThe conference-related information, such as details of a Google Meet conference. To create new conference details use the\ncreateRequest\nfield. To persist your changes, remember to set the\nconferenceDataVersion\nrequest parameter to\n1\nfor all event modification requests.\nwritable\ndescription\nstring\nDescription of the event. Can contain HTML. Optional.\nwritable\nend.\ndate\ndate\nThe date, in the format \"yyyy-mm-dd\", if this is an all-day event.\nwritable\nend.\ndateTime\ndatetime\nThe time, as a combined date-time value (formatted according to\nRFC3339\n). A time zone offset is required unless a time zone is explicitly specified in\ntimeZone\n.\nwritable\nend.\ntimeZone\nstring\nThe time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.\nwritable\nextendedProperties.\nprivate\nobject\nProperties that are private to the copy of the event that appears on this calendar.\nwritable\nextendedProperties.\nshared\nobject\nProperties that are shared between copies of the event on other attendees' calendars.\nwritable\nfocusTimeProperties\nnested object\nFocus Time event data. Used if\neventType\nis\nfocusTime\n.\nwritable\ngadget.\ndisplay\nstring\nThe gadget's display mode. Deprecated. Possible values are:\n\"\nicon\n\" - The gadget displays next to the event's title in the calendar view.\n\"\nchip\n\" - The gadget displays when the event is clicked.\nwritable\ngadget.\nheight\ninteger\nThe gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated.\nwritable\ngadget.\niconLink\nstring\nThe gadget's icon URL. The URL scheme must be HTTPS. Deprecated.\nwritable\ngadget.\nlink\nstring\nThe gadget's URL. The URL scheme must be HTTPS. Deprecated.\nwritable\ngadget.\npreferences\nobject\nPreferences.\nwritable\ngadget.\ntitle\nstring\nThe gadget's title. Deprecated.\nwritable\ngadget.\ntype\nstring\nThe gadget's type. Deprecated.\nwritable\ngadget.\nwidth\ninteger\nThe gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated.\nwritable\nguestsCanInviteOthers\nboolean\nWhether attendees other than the organizer can invite others to the event. Optional. The default is True.\nwritable\nguestsCanModify\nboolean\nWhether attendees other than the organizer can modify the event. Optional. The default is False.\nwritable\nguestsCanSeeOtherGuests\nboolean\nWhether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.\nwritable\nlocation\nstring\nGeographic location of the event as free-form text. Optional.\nwritable\norganizer\nobject\nThe organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in\nattendees\nwith the\norganizer\nfield set to True. To change the organizer, use the\nmove\noperation. Read-only, except when importing an event.\nwritable\norganizer.\ndisplayName\nstring\nThe organizer's name, if available.\nwritable\norganizer.\nemail\nstring\nThe organizer's email address, if available. It must be a valid email address as per\nRFC5322\n.\nwritable\noriginalStartTime.\ndate\ndate\nThe date, in the format \"yyyy-mm-dd\", if this is an all-day event.\nwritable\noriginalStartTime.\ndateTime\ndatetime\nThe time, as a combined date-time value (formatted according to\nRFC3339\n). A time zone offset is required unless a time zone is explicitly specified in\ntimeZone\n.\nwritable\noriginalStartTime.\ntimeZone\nstring\nThe time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.\nwritable\noutOfOfficeProperties\nnested object\nOut of office event data. Used if\neventType\nis\noutOfOffice\n.\nwritable\nrecurrence[]\nlist\nList of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in\nRFC5545\n. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the\nstart\nand\nend\nfields. This field is omitted for single events or instances of recurring events.\nwritable\nreminders.\noverrides[]\nlist\nIf the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.\nwritable\nreminders.overrides[].\nmethod\nstring\nThe method used by this reminder. Possible values are:\n\"\nemail\n\" - Reminders are sent via email.\n\"\npopup\n\" - Reminders are sent via a UI popup.\nRequired when adding a reminder.\nwritable\nreminders.overrides[].\nminutes\ninteger\nNumber of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).\nRequired when adding a reminder.\nwritable\nreminders.\nuseDefault\nboolean\nWhether the default reminders of the calendar apply to the event.\nwritable\nsequence\ninteger\nSequence number as per iCalendar.\nwritable\nsource.\ntitle\nstring\nTitle of the source; for example a title of a web page or an email subject.\nwritable\nsource.\nurl\nstring\nURL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.\nwritable\nstart.\ndate\ndate\nThe date, in the format \"yyyy-mm-dd\", if this is an all-day event.\nwritable\nstart.\ndateTime\ndatetime\nThe time, as a combined date-time value (formatted according to\nRFC3339\n). A time zone offset is required unless a time zone is explicitly specified in\ntimeZone\n.\nwritable\nstart.\ntimeZone\nstring\nThe time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.\nwritable\nstatus\nstring\nStatus of the event. Optional. Possible values are:\n\"\nconfirmed\n\" - The event is confirmed. This is the default status.\n\"\ntentative\n\" - The event is tentatively confirmed.\n\"\ncancelled\n\" - The event is cancelled (deleted). The\nlist\nmethod returns cancelled events only on incremental sync (when\nsyncToken\nor\nupdatedMin\nare specified) or if the\nshowDeleted\nflag is set to\ntrue\n. The\nget\nmethod always returns them.\nA cancelled status represents two different states depending on the event type:\nCancelled exceptions of an uncancelled recurring event indicate that this instance should no longer be presented to the user. Clients should store these events for the lifetime of the parent recurring event.\nCancelled exceptions are only guaranteed to have values for the\nid\n,\nrecurringEventId\nand\noriginalStartTime\nfields populated. The other fields might be empty.\nAll other cancelled events represent deleted events. Clients should remove their locally synced copies. Such cancelled events will eventually disappear, so do not rely on them being available indefinitely.\nDeleted events are only guaranteed to have the\nid\nfield populated.\nOn the organizer's calendar, cancelled events continue to expose event details (summary, location, etc.) so that they can be restored (undeleted). Similarly, the events to which the user was invited and that they manually removed continue to provide details. However, incremental sync requests with\nshowDeleted\nset to false will not return these details.\nIf an event changes its organizer (for example via the\nmove\noperation) and the original organizer is not on the attendee list, it will leave behind a cancelled event where only the\nid\nfield is guaranteed to be populated.\nwritable\nsummary\nstring\nTitle of the event.\nwritable\ntransparency\nstring\nWhether the event blocks time on the calendar. Optional. Possible values are:\n\"\nopaque\n\" - Default value. The event does block time on the calendar. This is equivalent to setting\nShow me as\nto\nBusy\nin the Calendar UI.\n\"\ntransparent\n\" - The event does not block time on the calendar. This is equivalent to setting\nShow me as\nto\nAvailable\nin the Calendar UI.\nwritable\nvisibility\nstring\nVisibility of the event. Optional. Possible values are:\n\"\ndefault\n\" - Uses the default visibility for events on the calendar. This is the default value.\n\"\npublic\n\" - The event is public and event details are visible to all readers of the calendar.\n\"\nprivate\n\" - The event is private and only event attendees may view event details.\n\"\nconfidential\n\" - The event is private. This value is provided for compatibility reasons.\nwritable\nResponse\nIf successful, this method returns an\nEvents resource\nin the response body.\nExamples\nNote:\nThe code examples available for this method do not represent all supported programming languages (see the\nclient libraries page\nfor a list of supported languages).\nJava\nUses the\nJava client library\n.\nimport\ncom.google.api.services.calendar.Calendar\n;\nimport\ncom.google.api.services.calendar.model.Event\n;\nimport\ncom.google.api.services.calendar.model.EventAttendee\n;\nimport\ncom.google.api.services.calendar.model.EventDateTime\n;\nimport\ncom.google.api.client.util.DateTime\n;\nimport\njava.util.Date\n;\n// ...\n// Initialize Calendar service with valid OAuth credentials\nCalendar\nservice\n=\nnew\nCalendar\n.\nBuilder\n(\nhttpTransport\n,\njsonFactory\n,\ncredentials\n)\n.\nsetApplicationName\n(\n\"applicationName\"\n).\nbuild\n();\n// Create and initialize a new event (could also retrieve an existing event)\nEvent\nevent\n=\nnew\nEvent\n();\nevent\n.\nsetICalUID\n(\n\"originalUID\"\n);\nEvent\n.\nOrganizer\norganizer\n=\nnew\nEvent\n.\nOrganizer\n();\norganizer\n.\nsetEmail\n(\n\"organizerEmail\"\n);\norganizer\n.\nsetDisplayName\n(\n\"organizerDisplayName\"\n);\nevent\n.\nsetOrganizer\n(\norganizer\n);\nArrayList<EventAttendee>\nattendees\n=\nnew\nArrayList<EventAttendee>\n();\nattendees\n.\nadd\n(\nnew\nEventAttendee\n().\nsetEmail\n(\n\"attendeeEmail\"\n));\n// ...\nevent\n.\nsetAttendees\n(\nattendees\n);\nDate\nstartDate\n=\nnew\nDate\n();\nDate\nendDate\n=\nnew\nDate\n(\nstartDate\n.\ngetTime\n()\n+\n3600000\n);\nDateTime\nstart\n=\nnew\nDateTime\n(\nstartDate\n,\nTimeZone\n.\ngetTimeZone\n(\n\"UTC\"\n));\nevent\n.\nsetStart\n(\nnew\nEventDateTime\n().\nsetDateTime\n(\nstart\n));\nDateTime\nend\n=\nnew\nDateTime\n(\nendDate\n,\nTimeZone\n.\ngetTimeZone\n(\n\"UTC\"\n));\nevent\n.\nsetEnd\n(\nnew\nEventDateTime\n().\nsetDateTime\n(\nend\n));\n// Import the event into a calendar\nEvent\nimportedEvent\n=\nservice\n.\nevents\n().\ncalendarImport\n(\n'\nprimary\n'\n,\nevent\n).\nexecute\n();\nSystem\n.\nout\n.\nprintln\n(\nimportedEvent\n.\ngetId\n());\nPython\nUses the\nPython client library\n.\nevent\n=\n{\n'summary'\n:\n'Appointment'\n,\n'location'\n:\n'Somewhere'\n,\n'organizer'\n:\n{\n'email'\n:\n'organizerEmail'\n,\n'displayName'\n:\n'organizerDisplayName'\n}\n,\n'start'\n:\n{\n'dateTime'\n:\n'2011-06-03T10:00:00.000-07:00'\n}\n,\n'end'\n:\n{\n'dateTime'\n:\n'2011-06-03T10:25:00.000-07:00'\n}\n,\n'attendees'\n:\n[\n{\n'email'\n:\n'attendeeEmail'\n,\n'displayName'\n:\n'attendeeDisplayName'\n,\n}\n,\n# ...\n],\n'iCalUID'\n:\n'originalUID'\n}\nimported_event\n=\nservice\n.\nevents\n()\n.\nimport_\n(\ncalendarId\n=\n'primary'\n,\nbody\n=\nevent\n)\n.\nexecute\n()\nprint\nimported_event\n[\n'id'\n]\nPHP\nUses the\nPHP client library\n.\n$event = new Google_Service_Calendar_Event();\n$event->setSummary('Appointment');\n$event->setLocation('Somewhere');\n$start = new Google_Service_Calendar_EventDateTime();\n$start->setDateTime('2011-06-03T10:00:00.000-07:00');\n$event->setStart($start);\n$end = new Google_Service_Calendar_EventDateTime();\n$end->setDateTime('2011-06-03T10:25:00.000-07:00');\n$event->setEnd($end);\n$attendee1 = new Google_Service_Calendar_EventAttendee();\n$attendee1->setEmail('attendeeEmail');\n// ...\n$attendees = array($attendee1,\n// ...,\n);\n$event->attendees = $attendees;\n$organizer = new Google_Service_Calendar_EventOrganizer();\n$organizer->setEmail('organizerEmail');\n$organizer->setDisplayName('organizerDisplayName');\n$event->setOrganizer($organizer);\n$event->setICalUID('originalUID');\n$importedEvent = $service->events->import('primary', $event);\necho $importedEvent->getId();\nRuby\nUses the\nRuby client library\n.\nevent\n=\nGoogle\n::\nApis\n::\nCalendarV3\n::\nEvent\n.\nnew\n(\nsummary\n:\n'Appointment'\n,\nlocation\n:\n'Somewhere'\n,\norganizer\n:\n{\nemail\n:\n'organizerEmail'\n,\ndisplay_name\n:\n'organizerDisplayName'\n}\n,\nstart\n:\n{\ndate_time\n:\n'2011-06-03T10:00:00.000-07:00'\n}\n,\nend\n:\n{\ndate_time\n:\n'2011-06-03T10:25:00.000-07:00'\n}\n,\nattendees\n:\n[\n{\nemail\n:\n'attendeeEmail'\n,\ndisplay_name\n:\n'attendeeDisplayName'\n,\n}\n,\n# ...\n]\n,\ni_cal_uid\n:\n'originalUID'\n)\nresult\n=\nclient\n.\nimport_event\n(\n'primary'\n,\nevent\n)\nprint\nresult\n.\nid\nTry it!\nUse the APIs Explorer below to call this method on live data and see the response.\nSend feedback"
}